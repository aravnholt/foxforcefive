# This is a basic workflow to help you get started with Actions

name: poi

defaults:
  run:
    shell: bash
    # working-directory: apis/poi/web

# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [master]
    paths:
      - apis/poi/**
      - .github/workflows/poi.yml
  pull_request:
    branches: [master]
    paths:
      - apis/poi/**
      - .github/workflows/poi.yml
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "test"
  test:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: Add dotnet package
        # working-directory: apis/poi/tests/UnitTests
        run: dotnet add package coverlet.msbuild

      # Runs a single command using the runners shell
      - name: Run unit test
        # working-directory: apis/poi/tests/UnitTests
        run: dotnet test --no-restore --verbosity normal /p:CollectCoverage=true /p:CoverletOutput=lcov/ /p:CoverletOutputFormat=lcov

      - name: Coveralls

        uses: coverallsapp/github-action@master

        with:
          github-token: ${​​{​​ secrets.GITHUB_TOKEN }​​}​​
          path-to-lcov: apis/poi/tests/UnitTests/lcov/coverage.info
          base-path: app/poi
          flag-name: Unit

      # When run on failure log issue
      - name: Run on failure
        uses: actions/github-script@0.9.0
        if: failure()
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            let body = "${{ env.build_name }} Workflow Failure \n Build Number: ${{ github.run_number }} \n Build Log: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }} \n SHA: [${{ github.sha }}](https://github.com/${{ github.repository }}/commit/${{ github.sha }}) \n";
            github.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: "${{ env.build_name }} Workflow ${{ github.run_number }} Failed! ",
              body: body
            });

  # This workflow contains a single job called "build"
  build-and-deploy:
    needs: [test]
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Build API-poi image
        run: |
          az acr build --image "devopsoh/api-poi:${{ github.sha }}" --registry openhackzkr4erh7acr --file Dockerfile .

      - name: Deploy to staging
        run: |
          az webapp config container set --name openhackzkr4erh7poi --resource-group openhackzkr4erh7rg --slot Staging --docker-custom-image-name="DOCKER|openhackzkr4erh7acr.azurecr.io/devopsoh/api-poi:${{ github.sha }}"
      # #TODO: Release gate?
      # - name: Deploy to prod
      #   run: |
      #     az webapp deployment slot swap --name openhackzkr4erh7trips --resource-group openhackzkr4erh7rg --slot Staging --target-slot Production

  # This workflow contains a single job called "validate Staging"
  validateStaging:
    needs: [build-and-deploy]
    # The type of runner that the job will run on
    runs-on:
      ubuntu-latest
      # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: Runs validation script
        shell: pwsh
        run: |
          ../../../scripts/PwshCheck.ps1 -uri https://openhackzkr4erh7poi-staging.azurewebsites.net/api/healthcheck/poi

  # This workflow contains a single job called "Swap to production"
  SwapToProduction:
    needs: [validateStaging]
    # The type of runner that the job will run on
    runs-on:
      ubuntu-latest
      # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy to prod
        run: |
          az webapp deployment slot swap --name openhackzkr4erh7poi --resource-group openhackzkr4erh7rg --slot Staging --target-slot Production

  # This workflow contains a single job called "Validate production"
  ValidateProduction:
    needs: [SwapToProduction]
    # The type of runner that the job will run on
    runs-on:
      ubuntu-latest
      # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: Runs validation script
        shell: pwsh
        run: |
          ../../../scripts/PwshCheck.ps1 -uri https://openhackzkr4erh7poi.azurewebsites.net/api/healthcheck/poi
